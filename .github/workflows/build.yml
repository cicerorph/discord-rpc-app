name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main ]

jobs:
  build:
    permissions: write-all
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            artifact-name: discord-rpc-app-win
          - os: ubuntu-latest
            artifact-name: discord-rpc-app-linux
          - os: macos-latest
            artifact-name: discord-rpc-app-mac
    
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Fetch all history for all tags and branches

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '21.x'

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm ci

    - name: Build Electron App
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm exec electron-builder -- --${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'ubuntu-latest' && 'linux' || 'mac' }}

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: dist/**/*
        retention-days: 5

    # Save artifacts for release
    - name: Prepare release artifacts
      shell: bash
      run: |
        mkdir -p release-artifacts
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp dist/*.exe release-artifacts/ || true
          cp dist/win-unpacked/*.exe release-artifacts/ || true
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cp dist/*.deb release-artifacts/ || true
          cp dist/*.AppImage release-artifacts/ || true
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          cp dist/*.dmg release-artifacts/ || true
        fi

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ matrix.os }}
        path: release-artifacts/**/*
        retention-days: 5

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts
        merge-multiple: true
        pattern: release-artifacts-*

    - name: List files
      run: find all-artifacts -type f | sort

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Discord RPC App ${{ env.VERSION }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        files: all-artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}